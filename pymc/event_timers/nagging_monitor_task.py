

'''
    This class will monitor itself as a subscriber i.e. it will monitor number of retransmissions
    being generated by this application. If generating retransmission too frequently it will be considered
    as a nagging subscriber and the connection should be closed. Whatever the connection should automatically
    be closed or closed by the distributor application logic is something to be considered.
    Currently the distributor application is just notified.
'''
from pymc.connection_configuration import ConnectionConfiguration
from pymc.event_api.events_to_clients import DistributorNaggingErrorEvent
from pymc.event_timers.connection_timer_event import ConnectionTimerEvent


class NaggingMonitorTask(ConnectionTimerEvent):
    def __init__(self, connection_id: int, configuration: ConnectionConfiguration):
        super().__init__(connection_id)
        self._interval_count: int = 0
        self._last_interval_count: int = 0
        self._consecutive_ticks: int = 0
        self._cfg_window_interval: int = configuration.nagging_window_interval_ms
        self._cfg_check_interval: int = configuration.nagging_check_interval_ms
        self._cfg_max_retransmissions: int = configuration.nagging_max_retransmit

    def clear(self):
        self._interval_count = 0
        self._last_interval_count = 0
        self._consecutive_ticks = 0

    def increment_outgoing_retransmission_requests(self, count: int = 1):
        self._interval_count += count

    '''
    This method is called periodically to monitor how frequently we are 
    generating outgoing retransmission requests.
    '''

    def execute(self, connection: 'Connection'):
        try:
            # check if we have generated any new retransmission requests lately, if not reset
            if self._interval_count > self._last_interval_count:
                # increment number of intervals for which retransmissions has been generated
                self._consecutive_ticks += self._cfg_window_interval
                # If there has been retransmissions during all intervals or an excessive number of retransmission during one interval
                # then notify the upper application logic,
                if self._consecutive_ticks >= self._cfg_check_interval:
                    #
                    if self._cfg_max_retransmissions == 0 or (self._cfg_max_retransmissions <= self._interval_count):
                        _event = DistributorNaggingErrorEvent(connection.mIpmg.mInetAddress, connection.mIpmg.mPort)
                        from pymc.client_controller import ClientDeliveryController
                        ClientDeliveryController.get_instance().queue_event(connection.connection_id, _event)
                    self.clear()
            else:
                self.clear()
        except Exception as e:
            connection.log_exception(e)

    def __str__(self):
        return "Retrans-interval {} Consecutive-ticks {}".format(self._interval_count, self._consecutive_ticks)
